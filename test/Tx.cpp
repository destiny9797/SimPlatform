//
// Created by zhujiaying on 2021/4/21.
//

#include "../TopFlow.h"
#include "../TranState.h"
#include "../BasicBlock.h"
#include "../Interface.h"
#include "../MsgControl.h"
#include "../TaskType.h"
#include "../Blocks/BPSK.h"
#include "../Blocks/ConvertByteBit.h"
#include "../Blocks/FrameEncap.h"
#include "../Sources/sig_source.h"
#include "../Blocks/Multiply.cpp"
#include "../Blocks/SRRCFilter.h"
#include "../Blocks/FirFilter.h"
#include <complex>

typedef std::shared_ptr<BasicBlock> spBasicBlock;

TopFlow topflow;

static void signal_handler(int sig_no)
{
    topflow.Stop();
//    topflow.Wait();
//    exit(0);
}

int main(int argc, char* argv[])
{
    signal(SIGINT,signal_handler);
    signal(SIGHUP,signal_handler);

    std::vector<float> srrctaps = {
            -0.000120042175487614281403740690290504745,
            -0.00002488068719354060955506122154723414 ,
            0.000089058978872232132128518300451247569,
            0.000178515339815782386615264365481436926,
            0.000204407024411362860756222192826214723,
            0.000146963247618040528672325728543057721,
            0.000016595382441391258606343261927662525,
            -0.000144504933100812570220469743809132979,
            -0.000273077870499154843220851462959331002,
            -0.000306745749825302141140098699523264258,
            -0.000210920696196000012623272823475417681,
            -0.000000235805652294675108216108288215762,
            0.000256536998400586839334802657930367786,
            0.000454637071312544388621695867769290089,
            0.000492129975777254248699155159130214088,
            0.000316663654250893818013767866403895823,
            -0.000039527494040222796922376402584120569,
            -0.000455374209814253408466072636784360839,
            -0.000756539340308858324589402766235934905,
            -0.000783255503575095855979537606827989293,
            -0.000466092047621932095875785240224331574,
            0.000123667150001666815766973583912147205,
            0.000777550266251959614968725098549384711,
            0.001216675028126946913470396438583520649,
            0.001203739922952942048572921862614748534,
            0.0006578404314465007354795211824693979  ,
            -0.000279645823025506060771627758754220849,
            -0.001267110814031724951023161196417277097,
            -0.001878739164006094659181700379235735454,
            -0.001778954160957307286880513252924629342,
            -0.000887118076152048316840303954222690663,
            0.000542938850978873059627272112948048743,
            0.001978386736203588923410645605827085092,
            0.00279548866285005961559995135701228719 ,
            0.002538439917786982236852511007896282536,
            0.001145832367007623350807499207348882919,
            -0.000960125688725578128532300858921644249,
            -0.002982032727957222191517150378103906405,
            -0.00403595546172694913389378257306816522 ,
            -0.003521319089613512542252804493614348758,
            -0.001422997529644614905439126140151984146,
            0.001595455398432827492927188473004207481,
            0.004377945297292345529227564071561573655,
            0.005700866854992136731339336108703719219,
            0.004787793032071248691683429399290616857,
            0.001705404647838129703757426014476550336,
            -0.002545334071991903982651317406293856038,
            -0.006323668660106857367098065481059165904,
            -0.007956641473527899591222656283662217902,
            -0.006444484025590302769814776695511682192,
            -0.001978504397931446327774107629693389754,
            0.003972453786423993556120581871482499992,
            0.009101655588871684215979129817242210265,
            0.011116990204894308322258744681221287465,
            0.008706058256149805385515350053537986241,
            0.00222743329124100485419401884712442552 ,
            -0.006195747694971364023797111286739891511,
            -0.0133004258345082258113700746093854832  ,
            -0.015869276446336906538636668528852169402,
            -0.012071652287328420161127695564573514275,
            -0.002438099558083270997771441201962261403,
            0.009975449886542168617675763186980475439,
            0.020415284444516717393680593772842257749,
            0.024066509072864953472370430631599447224,
            0.017980268607637222427753087572455115151,
            0.002598237639788890038228252876706392271,
            -0.017751140594767646913032521638342586812,
            -0.035702279053133646746776008740198449232,
            -0.042910851041100303571163010474265320227,
            -0.032737496639084137650677064357296330854,
            -0.002698341382017330029874369046183346654,
            0.044168723243136670530972764936450403184,
            0.099567866279000868945381341745815007016,
            0.151873089631768792839849879783287178725,
            0.189203736113458642620344107854180037975,
            0.202732395447351609885089374074595980346,
            0.189203736113458642620344107854180037975,
            0.151873089631768792839849879783287178725,
            0.099567866279000868945381341745815007016,
            0.044168723243136670530972764936450403184,
            -0.002698341382017330029874369046183346654,
            -0.032737496639084137650677064357296330854,
            -0.042910851041100303571163010474265320227,
            -0.035702279053133646746776008740198449232,
            -0.017751140594767646913032521638342586812,
            0.002598237639788890038228252876706392271,
            0.017980268607637222427753087572455115151,
            0.024066509072864953472370430631599447224,
            0.020415284444516717393680593772842257749,
            0.009975449886542168617675763186980475439,
            -0.002438099558083270997771441201962261403,
            -0.012071652287328420161127695564573514275,
            -0.015869276446336906538636668528852169402,
            -0.0133004258345082258113700746093854832  ,
            -0.006195747694971364023797111286739891511,
            0.00222743329124100485419401884712442552 ,
            0.008706058256149805385515350053537986241,
            0.011116990204894308322258744681221287465,
            0.009101655588871684215979129817242210265,
            0.003972453786423993556120581871482499992,
            -0.001978504397931446327774107629693389754,
            -0.006444484025590302769814776695511682192,
            -0.007956641473527899591222656283662217902,
            -0.006323668660106857367098065481059165904,
            -0.002545334071991903982651317406293856038,
            0.001705404647838129703757426014476550336,
            0.004787793032071248691683429399290616857,
            0.005700866854992136731339336108703719219,
            0.004377945297292345529227564071561573655,
            0.001595455398432827492927188473004207481,
            -0.001422997529644614905439126140151984146,
            -0.003521319089613512542252804493614348758,
            -0.00403595546172694913389378257306816522 ,
            -0.002982032727957222191517150378103906405,
            -0.000960125688725578128532300858921644249,
            0.001145832367007623350807499207348882919,
            0.002538439917786982236852511007896282536,
            0.00279548866285005961559995135701228719 ,
            0.001978386736203588923410645605827085092,
            0.000542938850978873059627272112948048743,
            -0.000887118076152048316840303954222690663,
            -0.001778954160957307286880513252924629342,
            -0.001878739164006094659181700379235735454,
            -0.001267110814031724951023161196417277097,
            -0.000279645823025506060771627758754220849,
            0.0006578404314465007354795211824693979  ,
            0.001203739922952942048572921862614748534,
            0.001216675028126946913470396438583520649,
            0.000777550266251959614968725098549384711,
            0.000123667150001666815766973583912147205,
            -0.000466092047621932095875785240224331574,
            -0.000783255503575095855979537606827989293,
            -0.000756539340308858324589402766235934905,
            -0.000455374209814253408466072636784360839,
            -0.000039527494040222796922376402584120569,
            0.000316663654250893818013767866403895823,
            0.000492129975777254248699155159130214088,
            0.000454637071312544388621695867769290089,
            0.000256536998400586839334802657930367786,
            -0.000000235805652294675108216108288215762,
            -0.000210920696196000012623272823475417681,
            -0.000306745749825302141140098699523264258,
            -0.000273077870499154843220851462959331002,
            -0.000144504933100812570220469743809132979,
            0.000016595382441391258606343261927662525,
            0.000146963247618040528672325728543057721,
            0.000204407024411362860756222192826214723,
            0.000178515339815782386615264365481436926,
            0.000089058978872232132128518300451247569,
            -0.00002488068719354060955506122154723414 ,
            -0.000120042175487614281403740690290504745
    };

    std::shared_ptr<TranState> spstate = std::make_shared<TranState>(TranState::SEND);

    spBasicBlock sinkapi = std::make_shared<SinkInterface>(
            spstate,
            "AtoB",
            sizeof(float),
            SinkInterface::AWGN,
            SinkInterface::Rayleigh);

    spBasicBlock msg = std::make_shared<MsgGenerater>(spstate);
    spBasicBlock byte_to_bit = std::make_shared<ConvertByteBit>("byte_to_bit");
    spBasicBlock frameencap = std::make_shared<FrameEncap>("header","1111100110101", 96);
    spBasicBlock bpsk_mod = std::make_shared<BPSK>("bpsk_mod");
    spBasicBlock srrc = std::make_shared<SRRCFilter>("srrc",
                                                     10,
                                                     0.35,
                                                     15,
                                                     10);
    spBasicBlock filter = std::make_shared<FirFilter>("srrc",srrctaps);
    spBasicBlock sine = std::make_shared<sig_source<float>>("sine",
                                                            4e3,
                                                            SIN_WAVE,
                                                            1e3,
                                                            1.0);
    spBasicBlock multiply = std::make_shared<Multiply<float>>("multiply");


    topflow.Connect(msg,0,byte_to_bit,0);
    topflow.Connect(byte_to_bit,0,frameencap,0);
    topflow.Connect(frameencap,0,bpsk_mod,0);
    topflow.Connect(bpsk_mod,0,srrc,0);
    topflow.Connect(srrc,0,multiply,0);
    topflow.Connect(sine,0,multiply,1);
    topflow.Connect(multiply,0,sinkapi,0);


    topflow.AddTask(randombytes);

    topflow.Start();
    topflow.Run();
    topflow.Wait();

    return 0;
}
