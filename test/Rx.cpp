//
// Created by zhujiaying on 2021/4/25.
//


#include "../TopFlow.h"
#include "../BasicBlock.h"
#include "../Interface.h"
#include "../MsgControl.h"
#include "../TaskType.h"
#include "../Blocks/ConvertByteBit.h"
#include "../Blocks/BPSKDemod.h"
#include "../Sources/sig_source.h"
#include "../Blocks/Multiply.cpp"
#include "../Blocks/NullSink.cpp"
#include "../Blocks/FirFilter.h"
#include <complex>

typedef std::shared_ptr<BasicBlock> spBasicBlock;

TopFlow topflow;

static void signal_handler(int sig_no)
{
    topflow.Stop();
//    topflow.Wait();
//    exit(0);
}

int main(int argc, char* argv[])
{

    signal(SIGINT,signal_handler);
    signal(SIGHUP,signal_handler);

    std::vector<float> taps = {
            -0.000467744403421764662256293609843282866,
            0.000802870932202872961309936261642405952,
            -0.000000000000000002077851709464597699585,
            -0.001041888331147497155984571470810351457,
            0.000768540238492010602082415982039265145,
            0.000930750510300168486070571116641758636,
            -0.001834127637361070237848048591899896564,
            0.000000000000000012655225384031731688662,
            0.002708566451471463003980444383955727972,
            -0.002018858783638971532425898658402729779,
            -0.002418984344264299250759631121354686911,
            0.004658554469913808900038976190671746735,
            -0.000000000000000008512798853222317046722,
            -0.006476347019012396177828350118943490088,
            0.004680130465705528187980721810390605242,
            0.005446879345567423591489841783186420798,
            -0.010217155627583466431795855555719754193,
            0.000000000000000013684631689737621100797,
            0.013617285507668098337719086998731654603,
            -0.009693548711162878334102188659926468972,
            -0.01116403577941376366877701542534850887 ,
            0.020829030564952815546275743940896063577,
            -0.000000000000000018607421974671728723454,
            -0.027979732342571818348719858704498619772,
            0.020236239401384196329169995465235842858,
            0.02393741611356267964816346704992611194 ,
            -0.046543610251880543349223273708048509434,
            0.000000000000000022118616002578201020294,
            0.073032575427453561012214322545332834125,
            -0.061130610881800835632038371159069356509,
            -0.092722023549320103930071468312235083431,
            0.302059981184381765029201005745562724769,
            0.599999694099046188000556867336854338646,
            0.302059981184381765029201005745562724769,
            -0.092722023549320103930071468312235083431,
            -0.061130610881800835632038371159069356509,
            0.073032575427453561012214322545332834125,
            0.000000000000000022118616002578201020294,
            -0.046543610251880543349223273708048509434,
            0.02393741611356267964816346704992611194 ,
            0.020236239401384196329169995465235842858,
            -0.027979732342571818348719858704498619772,
            -0.000000000000000018607421974671728723454,
            0.020829030564952815546275743940896063577,
            -0.01116403577941376366877701542534850887 ,
            -0.009693548711162878334102188659926468972,
            0.013617285507668098337719086998731654603,
            0.000000000000000013684631689737621100797,
            -0.010217155627583466431795855555719754193,
            0.005446879345567423591489841783186420798,
            0.004680130465705528187980721810390605242,
            -0.006476347019012396177828350118943490088,
            -0.000000000000000008512798853222317046722,
            0.004658554469913808900038976190671746735,
            -0.002418984344264299250759631121354686911,
            -0.002018858783638971532425898658402729779,
            0.002708566451471463003980444383955727972,
            0.000000000000000012655225384031731688662,
            -0.001834127637361070237848048591899896564,
            0.000930750510300168486070571116641758636,
            0.000768540238492010602082415982039265145,
            -0.001041888331147497155984571470810351457,
            -0.000000000000000002077851709464597699585,
            0.000802870932202872961309936261642405952,
            -0.000467744403421764662256293609843282866
    };

    std::shared_ptr<TranState> spstate = std::make_shared<TranState>(TranState::RECEIVE);

    spBasicBlock sourceapi = std::make_shared<SourceInterface>(
            spstate,
            "AtoB",
            sizeof(float));
    spBasicBlock sine = std::make_shared<sig_source<float>>("sine",
                                                            4e3,
                                                            SIN_WAVE,
                                                            1e3,
                                                            1.0);
    spBasicBlock multiply = std::make_shared<Multiply<float>>("multiply");

    spBasicBlock lowpass = std::make_shared<FirFilter>("lowpass",taps);

    spBasicBlock bpsk_demod = std::make_shared<BPSKDemod>("bpsk_demod");
    spBasicBlock bit_to_byte = std::make_shared<ConvertByteBit>("bit_to_byte",false);

    spBasicBlock nullsink = std::make_shared<NullSink<float>>("nullsink");



    topflow.Connect(sourceapi,0,multiply,0);
    topflow.Connect(sine,0,multiply,1);
    topflow.Connect(multiply,0,lowpass,0);
    topflow.Connect(lowpass,0,nullsink,0);

//    topflow.AddTask(randombytes);

    topflow.Start();
    topflow.Run();
    topflow.Wait();

    return 0;
}
